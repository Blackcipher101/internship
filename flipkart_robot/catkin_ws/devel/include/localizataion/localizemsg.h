// Generated by gencpp from file localizataion/localizemsg.msg
// DO NOT EDIT!


#ifndef LOCALIZATAION_MESSAGE_LOCALIZEMSG_H
#define LOCALIZATAION_MESSAGE_LOCALIZEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace localizataion
{
template <class ContainerAllocator>
struct localizemsg_
{
  typedef localizemsg_<ContainerAllocator> Type;

  localizemsg_()
    : angle(0.0)
    , x_cordinate(0)
    , y_cordinate(0)
    , timestamp(0.0)
    , id()
    , velocity(0.0)  {
    }
  localizemsg_(const ContainerAllocator& _alloc)
    : angle(0.0)
    , x_cordinate(0)
    , y_cordinate(0)
    , timestamp(0.0)
    , id(_alloc)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef double _angle_type;
  _angle_type angle;

   typedef uint8_t _x_cordinate_type;
  _x_cordinate_type x_cordinate;

   typedef uint8_t _y_cordinate_type;
  _y_cordinate_type y_cordinate;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef double _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::localizataion::localizemsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localizataion::localizemsg_<ContainerAllocator> const> ConstPtr;

}; // struct localizemsg_

typedef ::localizataion::localizemsg_<std::allocator<void> > localizemsg;

typedef boost::shared_ptr< ::localizataion::localizemsg > localizemsgPtr;
typedef boost::shared_ptr< ::localizataion::localizemsg const> localizemsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localizataion::localizemsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localizataion::localizemsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::localizataion::localizemsg_<ContainerAllocator1> & lhs, const ::localizataion::localizemsg_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.x_cordinate == rhs.x_cordinate &&
    lhs.y_cordinate == rhs.y_cordinate &&
    lhs.timestamp == rhs.timestamp &&
    lhs.id == rhs.id &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::localizataion::localizemsg_<ContainerAllocator1> & lhs, const ::localizataion::localizemsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace localizataion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::localizataion::localizemsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localizataion::localizemsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localizataion::localizemsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localizataion::localizemsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localizataion::localizemsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localizataion::localizemsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localizataion::localizemsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc347669993e03acc612f6126bf93eb0";
  }

  static const char* value(const ::localizataion::localizemsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc347669993e03acULL;
  static const uint64_t static_value2 = 0xc612f6126bf93eb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::localizataion::localizemsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localizataion/localizemsg";
  }

  static const char* value(const ::localizataion::localizemsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localizataion::localizemsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 angle\n"
"uint8 x_cordinate\n"
"uint8 y_cordinate\n"
"float64 timestamp\n"
"string id\n"
"float64 velocity\n"
;
  }

  static const char* value(const ::localizataion::localizemsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localizataion::localizemsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.x_cordinate);
      stream.next(m.y_cordinate);
      stream.next(m.timestamp);
      stream.next(m.id);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct localizemsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localizataion::localizemsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localizataion::localizemsg_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "x_cordinate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.x_cordinate);
    s << indent << "y_cordinate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.y_cordinate);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATAION_MESSAGE_LOCALIZEMSG_H
